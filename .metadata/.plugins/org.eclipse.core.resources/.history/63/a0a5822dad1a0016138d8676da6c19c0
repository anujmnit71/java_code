import static org.junit.Assert.assertEquals;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.logging.StreamHandler;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

class Producer implements Runnable {
	private final BlockingQueue<Object> queue;
	Producer(BlockingQueue pipeline){
		queue = pipeline;
	}
	
	
	public void produce() throws InterruptedException {
		while(queue.size() == limit)
			wait();
		synchronized(queue){
			System.out.println("In producer queue size before == " + queue.size());
			queue.offer(current);
			System.out.println("In producer queue added == " + current+ "size after == " + queue.size());
			current++;
			notify();
		}
	}


	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}

}

class Consumer {
	Queue queue;
	int limit;
	private int current;
	Consumer(Queue pipeline , int l){
		queue = pipeline;
		limit = l;
	}
	
	
	public void consume() throws InterruptedException {
		while(queue.size() == 0)
			wait();
		synchronized(queue){
			System.out.println("In comsumer queue size before == " + queue.size());
			int val = (int) queue.poll();
			System.out.println("In comsumer queue consumed == " +  val +"size after == " + queue.size());
			notify();
		}
	}

}


// Shared class used by both threads
class SharedPrinter{
	boolean evenFlag = false;
	boolean oddFlag = true;
	//Method for printing even numbers
	public void printEvenNum(int[] numarr , int num) throws InterruptedException{
		synchronized (this) {
			// While condition as mandated to avoid spurious wakeup
			while(!evenFlag)
				wait();
			numarr[num] = num;
			evenFlag = false;
			oddFlag = true;
			// Wake up thread waiting on this monitor(lock)
			notify();

		}

	}

	//Method for printing odd numbers
	public void printOddNum(int[] numarr , int num) throws InterruptedException{
		synchronized (this) {
			// While condition as mandated to avoid spurious wakeup
			while(!oddFlag)
				wait();
			numarr[num] = num;
			oddFlag = false;
			evenFlag = true;
			// Wake up thread waiting on this monitor(lock)
			notify();

		}
	}
}

// Thread Class generating Even numbers
class EvenNumProducer implements Runnable{
	SharedPrinter sp;
	int limit;
	int[] numarr;
	EvenNumProducer(SharedPrinter sp,int[] num , int limit){
		this.sp = sp;
		this.limit = limit;
		numarr = num;
	}
	@Override
	public void run(){
		for(int i = 2; i <= limit; i = i+2){
			try {
				sp.printEvenNum(numarr, i);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

}

//Thread Class generating Odd numbers
class OddNumProducer implements Runnable{
	SharedPrinter sp;
	int limit;
	int[] numarr;
	OddNumProducer(SharedPrinter sp, int[] num , int limit){
		this.sp = sp;
		this.limit = limit;
		numarr = num;
	}
	@Override
	public void run() {
		for(int i = 1; i <= limit; i = i+2){
			try {
				sp.printOddNum(numarr , i);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}


public class ProducerConsumerTestWithBlockingQueue{
	private static Logger logger =  Logger.getLogger(ProducerConsumerTestWithBlockingQueue.class.getName());
	static ProducerConsumerTestWithBlockingQueue test;
	
	@BeforeClass
    public static void oneTimeSetUp() {
		SimpleFormatter fmt = new SimpleFormatter();
		StreamHandler handler = new StreamHandler(System.out, fmt);
		logger.addHandler(handler);
		handler.setLevel(Level.ALL);
		logger.setLevel(Level.ALL);
		logger.log(Level.SEVERE,"@BeforeClass - oneTimeSetUp");
    	
    }

    @AfterClass
    public static void oneTimeTearDown() {
        // one-time cleanup code
    	logger.log(Level.FINE,"@AfterClass - oneTimeTearDown");
    }

    @Before
    public void setUp() {
        logger.log(Level.FINE,"@Before - setUp");
    }

    @After
    public void tearDown() {
        logger.log(Level.FINE,"@After - tearDown");
    }

    @Test
    public void test100() throws InterruptedException {
        logger.log(Level.FINE,"@Test - test for 100 entries");
        int limit=100 ;
        int[] numarr = new int[limit+1];
        OddEven.fillArray(numarr, limit);
        for(int i=1 ; i<=limit ; i++){
        	assertEquals(true, numarr[i] == i);
        }
    }

    @Test
    public void test100000() throws InterruptedException {
        logger.log(Level.FINE,"@Test - testOneItemCollection");
        int limit= 10000;
        int[] numarr = new int[limit+1];
        OddEven.fillArray(numarr, limit);
        for(int i=1 ; i<=limit ; i++){
        	assertEquals(true, numarr[i] == i);
        }
    }
}

